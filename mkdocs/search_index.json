{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to habitipy documentation!\n\u00b6\n\n\n \n\n\n \n \n \n\n\nhabitipy is a set of scripts to interact with \nHabitica\n:\n\n\n\n\nPython wrapper for the RESTful Habitica API (\nhabitica.api.Habitipy\n class)\n\n\nCommand-line interface with subcommands (e.g. \n> habitipy todos\n)\n\n\n\n\n\n\n\n\n\n\nVersion\n\n\nCI\n\n\nCoverage\n\n\n\n\n\n\n\n\n\n\nMaster\n\n\n\n\n\n\n\n\n\n\nStable (v0.1.21)\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\u00b6\n\n\n\n\nAccess to your Habitica account from command line\n\n\nEasy and intuitive subcommands syntax\n\n\nColourful output\n\n\nPluggable and extendable architecture\n\n\nAPI with built-in help \nread more on API",
            "title": "habitipy"
        },
        {
            "location": "/#welcome-to-habitipy-documentation",
            "text": "habitipy is a set of scripts to interact with  Habitica :   Python wrapper for the RESTful Habitica API ( habitica.api.Habitipy  class)  Command-line interface with subcommands (e.g.  > habitipy todos )      Version  CI  Coverage      Master      Stable (v0.1.21)",
            "title": "Welcome to habitipy documentation!"
        },
        {
            "location": "/#features",
            "text": "Access to your Habitica account from command line  Easy and intuitive subcommands syntax  Colourful output  Pluggable and extendable architecture  API with built-in help  read more on API",
            "title": "Features"
        },
        {
            "location": "/api/",
            "text": "Habitipy\n\n\n\nHabitipy\n(\nself\n,\n \nconf\n:\nDict\n[\nstr\n,\n \nstr\n],\n \n*\n,\n \napis\n=\nNone\n,\n \ncurrent\n:\nUnion\n[\nList\n[\nstr\n],\n \nNoneType\n]\n=\nNone\n,\n \nfrom_github\n=\nFalse\n,\n \nbranch\n=\nNone\n,\n \nstrict\n=\nFalse\n)\n \n->\n \nNone\n\n\n\n\n\n\nRepresents Habitica API\n\nArguments\n\n\n\n\nconf \n: Configuration dictionary for API. Should contain \nurl\n, \nlogin\n and \npassword\n fields\n\n\napis (None, List[ApiEndpoint], ApiNode)\n: Field, representing API endpoints.\n\n\ncurrent \n: current position in the API\n\n\nfrom_github \n: whether it is needed to download apiDoc from habitica's github\n\n\nbranch \n: branch to use to download apiDoc from habitica's github\n\n\nstrict \n: show warnings on inconsistent apiDocs\n\n\n\n\nExample\n\n\nfrom\n \nhabitipy\n \nimport\n \nHabitipy\n\n\nconf\n \n=\n \n{\n\n    \n'url'\n:\n \n'https://habitica.com'\n,\n\n    \n'login'\n:\n \n'your-login-uuid-to-replace'\n,\n\n    \n'password'\n:\n \n'your-password-uuid-here'\n\n\napi\n \n=\n \nHabitipy\n(\nconf\n)\n\n\nprint\n(\napi\n.\nuser\n.\nget\n())\n\n\n\n\n\n\nInteractive help:\n\n\nIn\n \n[\n1\n]:\n \nfrom\n \nhabitipy\n \nimport\n \nHabitipy\n,\n \nload_conf\n,\nDEFAULT_CONF\n\n\nIn\n \n[\n2\n]:\n \napi\n \n=\n \nHabitipy\n(\nload_conf\n(\nDEFAULT_CONF\n))\n\n\nIn\n \n[\n3\n]:\n \napi\n.<\ntab\n>\n\n     \napi\n.\napprovals\n     \napi\n.\ndebug\n         \napi\n.\nmodels\n        \napi\n.\ntags\n\n     \napi\n.\nchallenges\n    \napi\n.\ngroup\n         \napi\n.\nnotifications\n \napi\n.\ntasks\n\n     \napi\n.\ncontent\n       \napi\n.\ngroups\n        \napi\n.\nreorder\n-\ntags\n  \napi\n.\nuser\n\n     \napi\n.\ncoupons\n       \napi\n.\nhall\n          \napi\n.\nshops\n\n     \napi\n.\ncron\n          \napi\n.\nmembers\n       \napi\n.\nstatus\n\n \nIn\n \n[\n84\n]:\n \napi\n.\nuser\n.\nget\n?\n\n \nSignature\n:\n   \napi\n.\nuser\n.\nget\n(\n**\nkwargs\n)\n\n \nType\n:\n        \nHabitipy\n\n \nString\n \nform\n:\n \n<\nhabitipy\n.\napi\n.\nHabitipy\n \nobject\n \nat\n \n0x7fa6fd7966d8\n>\n\n \nFile\n:\n        \n~/\nprojects\n/\npython\n/\nhabitica\n/\nhabitipy\n/\napi\n.\npy\n\n \nDocstring\n:\n\n \n{\nget\n}\n \n/\napi\n/\nv3\n/\nuser\n \nGet\n \nthe\n \nauthenticated\n \nuser\n's profile\n\n\n \nresponce\n \nparams\n:\n\n \n\"data\"\n \nof\n \ntype\n \n\"object\"\n\n\n\n\n\n\nFrom other Python consoles you can just run:\n\n\n>>>\n \ndir\n(\napi\n)\n\n\n[\n'__call__'\n,\n \n'__class__'\n,\n \n'__delattr__'\n,\n \n'__dict__'\n,\n \n'__dir__'\n,\n \n'__doc__'\n,\n \n'__eq__'\n,\n\n\n'__format__'\n,\n \n'__ge__'\n,\n \n'__getattr__'\n,\n \n'__getattribute__'\n,\n \n'__getitem__'\n,\n \n'__gt__'\n,\n\n\n'__hash__'\n,\n \n'__init__'\n,\n \n'__init_subclass__'\n,\n \n'__le__'\n,\n \n'__lt__'\n,\n \n'__module__'\n,\n \n'__ne__'\n,\n\n\n'__new__'\n,\n \n'__reduce__'\n,\n \n'__reduce_ex__'\n,\n \n'__repr__'\n,\n \n'__setattr__'\n,\n \n'__sizeof__'\n,\n \n'__str__'\n,\n\n\n'__subclasshook__'\n,\n \n'__weakref__'\n,\n \n'_apis'\n,\n \n'_conf'\n,\n \n'_current'\n,\n \n'_is_request'\n,\n\n\n'_make_apis_dict'\n,\n \n'_make_headers'\n,\n \n'_node'\n,\n\n\n'approvals'\n,\n \n'challenges'\n,\n \n'content'\n,\n \n'coupons'\n,\n \n'cron'\n,\n \n'debug'\n,\n \n'group'\n,\n \n'groups'\n,\n \n'hall'\n,\n\n\n'members'\n,\n \n'models'\n,\n \n'notifications'\n,\n \n'reorder-tags'\n,\n\n\n'shops'\n,\n \n'status'\n,\n \n'tags'\n,\n \n'tasks'\n,\n \n'user'\n]\n\n\n>>>\n \nprint\n(\napi\n.\nuser\n.\nget\n.\n__doc__\n)\n\n\n{\nget\n}\n \n/\napi\n/\nv3\n/\nuser\n \nGet\n \nthe\n \nauthenticated\n \nuser\n's profile\n\n\n\nresponce\n \nparams\n:\n\n\n\"data\"\n \nof\n \ntype\n \n\"object\"",
            "title": "REST API Module"
        },
        {
            "location": "/cli/",
            "text": "habitipy.cli\n\n\n\nhabitipy - tools and library for Habitica restful API\ncommand-line interface library using plumbum\n\n\nis_uuid\n\n\n\nis_uuid\n(\nu\n)\n\n\n\n\n\n\nvalidator for plumbum prompt\n\nload_conf\n\n\nload_conf\n(\nconfigfile\n,\n \nconfig\n=\nNone\n)\n\n\n\n\n\n\nGet authentication data from the AUTH_CONF file.\n\nConfiguredApplication\n\n\nConfiguredApplication\n(\nself\n,\n \nexecutable\n)\n\n\n\n\n\n\nApplication with config\n\nget_content\n\n\nget_content\n(\napi\n,\n \nrebuild_cache\n=\nFalse\n)\n\n\n\n\n\n\nget content from server or cache\n\nApplicationWithApi\n\n\nApplicationWithApi\n(\nself\n,\n \nexecutable\n)\n\n\n\n\n\n\nApplication with configured Habitica API\n\nScoreInfo\n\n\nScoreInfo\n(\nself\n,\n \n/\n,\n \n*\nargs\n,\n \n**\nkwargs\n)\n\n\n\n\n\n\ntask value/score info: http://habitica.wikia.com/wiki/Task_Value\n\nTasksPrint\n\n\nTasksPrint\n(\nself\n,\n \nexecutable\n)\n\n\n\n\n\n\nPut all tasks from \ndomain\n to print\n\nget_additional_rewards\n\n\nget_additional_rewards\n(\napi\n)\n\n\n\n\n\n\nreturns list of non-user rewards (potion, armoire, gear)\n\nTaskId\n\n\nTaskId\n(\nself\n,\n \n/\n,\n \n*\nargs\n,\n \n**\nkwargs\n)\n\n\n\n\n\n\nhandle task-id formats such as:\n    habitica todos done 3 taskalias_or_uuid\n    habitica todos done 1,2,3,taskalias_or_uuid\n    habitica todos done 2 3\n    habitica todos done 1-3,4 8\n\n\nTasksChange\n\n\n\nTasksChange\n(\nself\n,\n \nexecutable\n)\n\n\n\n\n\n\nfind all tasks specified by user and do self.op on them\n\nTaskId\n\n\nTaskId\n(\nself\n,\n \n/\n,\n \n*\nargs\n,\n \n**\nkwargs\n)\n\n\n\n\n\n\nhandle task-id formats such as:\n    habitica todos done 3 taskalias_or_uuid\n    habitica todos done 1,2,3,taskalias_or_uuid\n    habitica todos done 2 3\n    habitica todos done 1-3,4 8",
            "title": "Command line interface library"
        },
        {
            "location": "/util/",
            "text": "habitipy.util\n\n\n\nhabitipy - tools and library for Habitica restful API\nutility functions\n\n\nprogressed_bar\n\n\n\nprogressed_bar\n(\ncount\n,\n \ntotal\n=\n100\n,\n \nstatus\n=\nNone\n,\n \nsuffix\n=\nNone\n,\n \nbar_len\n=\n10\n)\n\n\n\n\n\n\nrender a progressed.io like progress bar\n\nprogressed\n\n\nprogressed\n(\nstring\n)\n\n\n\n\n\n\nhelper function to replace all links to progressed.io with progress bars\n\n\nExample\n\n\nfrom\n \nhabitipy.util\n \nimport\n \nprogressed\n\n\ntext_from_habitica\n \n=\n \n'Write thesis ![progress](http://progressed.io/bar/0 \"progress\")'\n\n\nprint\n(\nprogressed\n(\ntext_from_habitica\n))\n\n\n\n\n\n\nWrite thesis \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u25880%\n\n\n\n\n\nprettify\n\n\n\nprettify\n(\nstring\n)\n\n\n\n\n\n\nreplace markup emoji and progressbars with actual things\n\n\nExample\n\n\nfrom\n \nhabitipy.util\n \nimport\n \nprettify\n\n\nprint\n(\nprettify\n(\n'Write thesis :book: ![progress](http://progressed.io/bar/0 \"progress\")'\n))\n\n\n\n\n\n\nWrite thesis \ud83d\udcd6 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u25880%\n\n\n\n\n\numask\n\n\n\numask\n(\nmask\n)\n\n\n\n\n\n\ntemporarily change umask\n\n\nArguments\n\n\n\n\nmask \n: a umask (invese of chmod argument)\n\n\n\n\nExample\n\n\nwith\n \numask\n(\n0\no077\n),\n \nopen\n(\n'yay.txt'\n)\n \nas\n \nf\n:\n\n    \nf\n.\nwrite\n(\n'nyaroo~n'\n)\n\n\n\n\n\n\nyay.txt\n will be written with 600 file mode\n\n\nis_secure_file\n\n\n\nis_secure_file\n(\nfn\n)\n\n\n\n\n\n\nchecks if a file can be accessed only by the owner\n\nSecurityError\n\n\nSecurityError\n(\nself\n,\n \n/\n,\n \n*\nargs\n,\n \n**\nkwargs\n)\n\n\n\n\n\n\nError fired when a secure file is stored in an insecure manner\n\nassert_secure_file\n\n\nassert_secure_file\n(\nfile\n)\n\n\n\n\n\n\nchecks if a file is stored securely\n\nget_translation_for\n\n\nget_translation_for\n(\npackage_name\n:\nstr\n)\n \n->\n \ngettext\n.\nNullTranslations\n\n\n\n\n\n\nfind and return gettext translation for package\n\nget_translation_functions\n\n\nget_translation_functions\n(\npackage_name\n:\nstr\n,\n \nnames\n:\nTuple\n[\nstr\n,\n \n...\n]\n=\n(\n'gettext'\n,))\n\n\n\n\n\n\nfinds and installs translation functions for package",
            "title": "Utility functions"
        },
        {
            "location": "/async/",
            "text": "HabitipyAsync\n\n\n\nHabitipyAsync\n(\nself\n,\n \nconf\n:\nDict\n[\nstr\n,\n \nstr\n],\n \n*\n,\n \napis\n=\nNone\n,\n \ncurrent\n:\nUnion\n[\nList\n[\nstr\n],\n \nNoneType\n]\n=\nNone\n,\n \nfrom_github\n=\nFalse\n,\n \nbranch\n=\nNone\n,\n \nstrict\n=\nFalse\n)\n \n->\n \nNone\n\n\n\n\n\n\nHabitipy API using aiohttp as backend for request\n\n\nasync\n \ndef\n \nHabitipyAsync\n.\n__call__\n(\n\n    \nself\n,\n\n    \nsession\n:\n \naiohttp\n.\nClientSession\n,\n\n    \n**\nkwargs\n\n\n)\n \n->\n \nUnion\n[\nDict\n,\n \nList\n]\n\n\n\n\n\n\nArguments\n\n\n\n\nsession (aiohttp.ClientSession)\n: aiohttp session used to make request.\n\n\n\n\nExample\n\n\nimport\n \nasyncio\n\n\nfrom\n \naiohttp\n \nimport\n \nClientSession\n\n\nfrom\n \nhabitipy\n \nimport\n \nHabitipy\n,\n \nload_conf\n,\nDEFAULT_CONF\n\n\nfrom\n \nhabitipy.async\n \nimport\n \nHabitipyAsync\n\n\n\n\nloop\n \n=\n \nasyncio\n.\nnew_event_loop\n()\n\n\napi\n \n=\n \nHabitipyAsync\n(\nload_conf\n(\nDEFAULT_CONF\n))\n\n\n\nasync\n \ndef\n \nmain\n(\napi\n):\n\n    \nasync\n \nwith\n \nClientSession\n()\n \nas\n \nsession\n:\n\n        \nu\n \n=\n \nawait\n \napi\n.\nuser\n.\nget\n(\nsession\n)\n\n        \nreturn\n \nu\n\n\nloop\n.\nrun_until_complete\n(\nmain\n(\napi\n))",
            "title": "asyncio compatibility"
        }
    ]
}