{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to habitipy documentation! \u00b6 habitipy is a set of scripts to interact with Habitica : Python wrapper for the RESTful Habitica API ( habitica.api.Habitipy class) Command-line interface with subcommands (e.g. > habitipy todos ) Version CI Coverage Master Stable (v0.3.0) Features \u00b6 Access to your Habitica account from command line Easy and intuitive subcommands syntax Colourful output Pluggable and extendable architecture API with built-in help read more on API","title":"habitipy"},{"location":"#welcome-to-habitipy-documentation","text":"habitipy is a set of scripts to interact with Habitica : Python wrapper for the RESTful Habitica API ( habitica.api.Habitipy class) Command-line interface with subcommands (e.g. > habitipy todos ) Version CI Coverage Master Stable (v0.3.0)","title":"Welcome to habitipy documentation!"},{"location":"#features","text":"Access to your Habitica account from command line Easy and intuitive subcommands syntax Colourful output Pluggable and extendable architecture API with built-in help read more on API","title":"Features"},{"location":"api/","text":"Habitipy Habitipy ( self , conf : Dict [ str , str ], * , apis = None , current : Union [ List [ str ], NoneType ] = None , from_github = False , branch = None , strict = False ) -> None Represents Habitica API Arguments conf : Configuration dictionary for API. Should contain url , login and password fields apis (None, List[ApiEndpoint], ApiNode) : Field, representing API endpoints. current : current position in the API from_github : whether it is needed to download apiDoc from habitica's github branch : branch to use to download apiDoc from habitica's github strict : show warnings on inconsistent apiDocs Example from habitipy import Habitipy conf = { 'url' : 'https://habitica.com' , 'login' : 'your-login-uuid-to-replace' , 'password' : 'your-password-uuid-here' api = Habitipy ( conf ) print ( api . user . get ()) Interactive help: In [ 1 ]: from habitipy import Habitipy , load_conf , DEFAULT_CONF In [ 2 ]: api = Habitipy ( load_conf ( DEFAULT_CONF )) In [ 3 ]: api .< tab > api . approvals api . debug api . models api . tags api . challenges api . group api . notifications api . tasks api . content api . groups api . reorder - tags api . user api . coupons api . hall api . shops api . cron api . members api . status In [ 84 ]: api . user . get ? Signature : api . user . get ( ** kwargs ) Type : Habitipy String form : < habitipy . api . Habitipy object at 0x7fa6fd7966d8 > File : ~/ projects / python / habitica / habitipy / api . py Docstring : { get } / api / v3 / user Get the authenticated user 's profile responce params : \"data\" of type \"object\" From other Python consoles you can just run: >>> dir ( api ) [ '__call__' , '__class__' , '__delattr__' , '__dict__' , '__dir__' , '__doc__' , '__eq__' , '__format__' , '__ge__' , '__getattr__' , '__getattribute__' , '__getitem__' , '__gt__' , '__hash__' , '__init__' , '__init_subclass__' , '__le__' , '__lt__' , '__module__' , '__ne__' , '__new__' , '__reduce__' , '__reduce_ex__' , '__repr__' , '__setattr__' , '__sizeof__' , '__str__' , '__subclasshook__' , '__weakref__' , '_apis' , '_conf' , '_current' , '_is_request' , '_make_apis_dict' , '_make_headers' , '_node' , 'approvals' , 'challenges' , 'content' , 'coupons' , 'cron' , 'debug' , 'group' , 'groups' , 'hall' , 'members' , 'models' , 'notifications' , 'reorder-tags' , 'shops' , 'status' , 'tags' , 'tasks' , 'user' ] >>> print ( api . user . get . __doc__ ) { get } / api / v3 / user Get the authenticated user 's profile responce params : \"data\" of type \"object\"","title":"REST API Module"},{"location":"async/","text":"HabitipyAsync HabitipyAsync ( self , conf : Dict [ str , str ], * , apis = None , current : Union [ List [ str ], NoneType ] = None , from_github = False , branch = None , strict = False ) -> None Habitipy API using aiohttp as backend for request async def HabitipyAsync . __call__ ( self , session : aiohttp . ClientSession , ** kwargs ) -> Union [ Dict , List ] Arguments session (aiohttp.ClientSession) : aiohttp session used to make request. Example import asyncio from aiohttp import ClientSession from habitipy import Habitipy , load_conf , DEFAULT_CONF from habitipy.aio import HabitipyAsync loop = asyncio . new_event_loop () api = HabitipyAsync ( load_conf ( DEFAULT_CONF )) async def main ( api ): async with ClientSession () as session : u = await api . user . get ( session ) return u loop . run_until_complete ( main ( api ))","title":"asyncio compatibility"},{"location":"cli/","text":"habitipy.cli habitipy - tools and library for Habitica restful API command-line interface library using plumbum is_uuid is_uuid ( u ) validator for plumbum prompt load_conf load_conf ( configfile , config = None ) Get authentication data from the AUTH_CONF file. ConfiguredApplication ConfiguredApplication ( self , executable ) Application with config get_content get_content ( api , rebuild_cache = False ) get content from server or cache ApplicationWithApi ApplicationWithApi ( self , executable ) Application with configured Habitica API HabiticaCli HabiticaCli ( self , executable ) Status Status ( self , executable ) ScoreInfo ScoreInfo ( self , / , * args , ** kwargs ) task value/score info: http://habitica.wikia.com/wiki/Task_Value TasksPrint TasksPrint ( self , executable ) Put all tasks from domain to print Habits Habits ( self , executable ) Dailys Dailys ( self , executable ) ToDos ToDos ( self , executable ) get_additional_rewards get_additional_rewards ( api ) returns list of non-user rewards (potion, armoire, gear) Rewards Rewards ( self , executable ) TaskId TaskId ( self , / , * args , ** kwargs ) handle task-id formats such as: habitica todos done 3 taskalias_or_uuid habitica todos done 1,2,3,taskalias_or_uuid habitica todos done 2 3 habitica todos done 1-3,4 8 TaskId TaskId ( self , / , * args , ** kwargs ) handle task-id formats such as: habitica todos done 3 taskalias_or_uuid habitica todos done 1,2,3,taskalias_or_uuid habitica todos done 2 3 habitica todos done 1-3,4 8 TasksChange TasksChange ( self , executable ) find all tasks specified by user and do self.op on them HabitsChange HabitsChange ( self , executable ) HabitsAdd HabitsAdd ( self , executable ) HabitsDelete HabitsDelete ( self , executable ) HabitsUp HabitsUp ( self , executable ) HabitsDown HabitsDown ( self , executable ) DailysChange DailysChange ( self , executable ) DailysUp DailysUp ( self , executable ) DailyDown DailyDown ( self , executable ) TodosChange TodosChange ( self , executable ) TodosUp TodosUp ( self , executable ) TodosDelete TodosDelete ( self , executable ) TodosAdd TodosAdd ( self , executable ) RewardsBuy RewardsBuy ( self , executable ) RewardsAdd RewardsAdd ( self , executable ) Home Home ( self , executable ) Server Server ( self , executable ) Spells Spells ( self , executable )","title":"Command line interface library"},{"location":"subcommands/","text":"Status \u00b6","title":"Subcommands"},{"location":"subcommands/#status","text":"","title":"Status"},{"location":"util/","text":"habitipy.util habitipy - tools and library for Habitica restful API utility functions progressed_bar progressed_bar ( count , total = 100 , status = None , suffix = None , bar_len = 10 ) render a progressed.io like progress bar progressed progressed ( string ) helper function to replace all links to progressed.io with progress bars Example from habitipy.util import progressed text_from_habitica = 'Write thesis ![progress](http://progressed.io/bar/0 \"progress\")' print ( progressed ( text_from_habitica )) Write thesis \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u25880% prettify prettify ( string ) replace markup emoji and progressbars with actual things Example from habitipy.util import prettify print ( prettify ( 'Write thesis :book: ![progress](http://progressed.io/bar/0 \"progress\")' )) Write thesis \ud83d\udcd6 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u25880% umask umask ( mask ) temporarily change umask Arguments mask : a umask (invese of chmod argument) Example with umask ( 0 o077 ), open ( 'yay.txt' ) as f : f . write ( 'nyaroo~n' ) yay.txt will be written with 600 file mode is_secure_file is_secure_file ( fn ) checks if a file can be accessed only by the owner SecurityError SecurityError ( self , / , * args , ** kwargs ) Error fired when a secure file is stored in an insecure manner assert_secure_file assert_secure_file ( file ) checks if a file is stored securely get_translation_for get_translation_for ( package_name : str ) -> gettext . NullTranslations find and return gettext translation for package get_translation_functions get_translation_functions ( package_name : str , names : Tuple [ str , ... ] = ( 'gettext' ,)) finds and installs translation functions for package","title":"Utility functions"}]}